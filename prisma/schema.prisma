generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String      @id @unique
  name            String
  telephone       String
  email           String      @unique
  createdAt       DateTime    @default(now())
  password        String
  cpf             String      @unique
  address         String?
  typeUser        Role
  manutences      Manutence[] 
  messages        Message[]   
  chatRooms       ChatRoom[]  
  historico       HistoricoManutencao[]
  adminManutences Manutence[] @relation(name: "AdminManutence") 
  reports         Report[]
  notifications   Notification[]
}

enum Role {
  ADMIN
  USER
}

enum Category {
  Vazamento
  Problemas_Estruturais
  Problemas_Eletricidade
  Problemas_Acabamento
  Problemas_Acessibilidade
  Problemas_Impermeabilização
}

model Report {
  id String @id @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id])
  manutenceId String
  manutence Manutence @relation(fields: [manutenceId], references: [id])
  description String @db.Text
  title String @db.VarChar(40)
}


model Manutence {
  id               String          @id @unique
  photos           Json?
  video            Json?     
  specialties      Json
  title            String
  address          String
  message          String @db.Text
  status_manutence StatusManutence @default(NOVO)
  createdAt        DateTime        @default(now())
  userId           String        
  adminId          String?        
  user             User            @relation(fields: [userId], references: [id],  onDelete: Cascade)
  admin            User?           @relation(fields: [adminId], references: [id], name: "AdminManutence")
  chatRoomId       String?         @unique 
  chatRoom         ChatRoom?       @relation(fields: [chatRoomId], references: [id])
  reports          Report[]
  notifications    Notification[]
}

enum StatusManutence {
  FINALIZADO
  ANDAMENTO
  CANCELADO
  NOVO
}

model ChatRoom {
  id              String     @id @default(uuid())
  name            String?  
  users           User[]    
  messages        Message[]
  manutence        Manutence? @relation 
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  unreadCount     Int        @default(0)
}

model Message {
  id              String    @id @default(uuid())
  content         String
  createdAt       DateTime  @default(now())
  senderId        String
  senderType      Role
  chatRoomId      String
  sender          User      @relation(fields: [senderId], references: [id])
  chatRoom        ChatRoom  @relation(fields: [chatRoomId], references: [id])
  isRead          Boolean   @default(false)
  readBy          Json?     
  readAt          DateTime?
}

model Notification {
  id          String    @id @default(uuid())
  title       String
  message     String    @db.Text
  type        NotificationType @default(INFO)
  isRead      Boolean   @default(false)
  userId      String
  manutenceId String?
  createdAt   DateTime  @default(now())
  readAt      DateTime?
  user        User      @relation(fields: [userId], references: [id])
  manutence   Manutence? @relation(fields: [manutenceId], references: [id])
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
}

model HistoricoManutencao {
  id          String    @id @unique
  data        DateTime  @default(now())
  usuarioId   String    
  action      String    
  manutenceId String?
  manutencao Json
  usuario     User      @relation(fields: [usuarioId], references: [id])
}

